@startuml
scale 2

[->ReflectionUtils : bind(interfaceClass, implementationClass)
activate ReflectionUtils
ReflectionUtils->ReflectionUtils : createInstance(implementationClass)
ReflectionUtils->"IMPLEMENTATIONS : Map<Class, Object>" : put(implementationClass, implementation)
activate "IMPLEMENTATIONS : Map<Class, Object>"
ReflectionUtils->"IMPLEMENTATIONS : Map<Class, Object>" : put(interfaceClass, implementation)
deactivate "IMPLEMENTATIONS : Map<Class, Object>"
deactivate ReflectionUtils

[->ReflectionUtils : bind(interfaceClass, implementation)
activate ReflectionUtils
ReflectionUtils->"IMPLEMENTATIONS : Map<Class, Object>" : put(implementationClass, implementation)
activate "IMPLEMENTATIONS : Map<Class, Object>"
ReflectionUtils->"IMPLEMENTATIONS : Map<Class, Object>" : put(interfaceClass, implementation)
deactivate "IMPLEMENTATIONS : Map<Class, Object>"
deactivate ReflectionUtils

[->ReflectionUtils : getInstance(type)
activate ReflectionUtils
ReflectionUtils->"IMPLEMENTATIONS : Map<Class, Object>" : computeIfAbsent(type, (instanceType) -> createInstance(instanceType))
activate "IMPLEMENTATIONS : Map<Class, Object>"
"IMPLEMENTATIONS : Map<Class, Object>"-->ReflectionUtils : instance
deactivate "IMPLEMENTATIONS : Map<Class, Object>"
[<--ReflectionUtils : instance
deactivate ReflectionUtils


[->ReflectionUtils : createInstance(type)
activate ReflectionUtils
ReflectionUtils->"type : Class" : getConstructors()
activate "type : Class"
"type : Class"-->ReflectionUtils : constructors
deactivate "type : Class"
alt constructors.length > 1
[<--ReflectionUtils : wyrzuć wyjątek InstantiationException
else constructors.length == 0
[<--ReflectionUtils : wyrzuć wyjątek InstantiationException
else
loop dla każdego parametru z constructors[0].getParameterTypes()
ReflectionUtils->ReflectionUtils : getInstance(parametrType)
end
[<--ReflectionUtils : constructors[0].newInstance(parameters)
end
deactivate ReflectionUtils


@enduml