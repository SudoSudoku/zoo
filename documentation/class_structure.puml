@startuml
interface Serializable

class ZooApplication {
    + {static} main()
}

class ZooConsoleAdapter {
    + <<constructor>> ZooConsoleAdapter()
    + nextCommand()
}

abstract class AbstractConsoleAdapter<Actions : ActionFactory> {
    - {static} DESERIALIZATION_CHAIN : List<Class<? extends DeserializationLink>>

    #actions : Actions
    -scanner : Scanner
    -isRunning : boolean

    + <<constructor>> AbstractConsoleAdapter(Actions actions)
    +{abstract} nextCommand()
    +isRunning() : boolean
    +execute()
    #<Type : Object> readInput(type : Class<Type>) : Type
    #format(result : ResultDto) : String
    #shutDown()
}

class ReflectionUtils {
    -<<constructor>> ReflectionUtils()
    +{static} <Type : Object> createInstance(type : Class<Type>) : Type
    +{static} setField(field : Field, object : Object, value : Value)
}

class ExitStateRequestException

class RuntimeException

ExitStateRequestException <|-- RuntimeException
AbstractConsoleAdapter --> ExitStateRequestException : <<use>>

ZooApplication --> ZooConsoleAdapter : <<use>>
ZooConsoleAdapter <|-- AbstractConsoleAdapter : <<bind>> \n Actions -> ZooActionFactory

AbstractConsoleAdapter --> ReflectionUtils : <<use>>

interface DeserializationLink {
    +deserialize(String input, Class<?> type) : Object
}

class StringDeserializationLink {
    +deserialize(String input, Class<?> type) : Object
}

class IntegerDeserializationLink {
    +deserialize(String input, Class<?> type) : Object
}

class BooleanDeserializationLink {
    +deserialize(String input, Class<?> type) : Object
}

DeserializationLink <|.. StringDeserializationLink
DeserializationLink <|.. IntegerDeserializationLink
DeserializationLink <|.. BooleanDeserializationLink
AbstractConsoleAdapter --> DeserializationLink  : <<use>>

interface ActionFactory<ActionIndex : Enum> {
    +create(index: ActionIndex) : ActionExecutor
}

class ZooActionFactory {
    +create(index: ActionIndex) : ActionExecutor
}

ZooActionFactory ..|> ActionFactory : <<bind>> \n ActionIndex -> ZooActionIndex
ZooActionFactory <-- ZooConsoleAdapter : <<use>>

enum ZooActionIndex {
    +GET_MENU
}

ZooActionIndex -- ZooActionFactory

class ResultDto<Result : Serializable> {
    -result : Result
    +toString() : String
}

class ListResultDto<Result : Serializable> {
    -result : List<Result>
    +toString() : String
}

ResultDto ..|> Serializable
ResultDto <|-- ListResultDto

interface ActionExecutor<Query : ActionQuery> {
    +execute(query: Query) : ResultDto
}

interface ActionQuery

class GetMenuQuery

GetMenuQuery ..|> ActionQuery
AbstractConsoleAdapter --> ResultDto : <<use>>

class GetMenuActionExecutor {
    +execute(query: GetMenuQuery) : ResultDto
}

class MenuDictionary {
    - {static} DICTIONARY : Map<ZooActionIndex, String>

    -<<constructor>> MenuDictionary()
    + {static} get(index : ZooActionIndex) : String
}

class MenuItemFormatter {
    -<<constructor>> MenuItemFormatter()
    + {static} map(index : ZooActionIndex)
}

GetMenuActionExecutor --> MenuItemFormatter : <<use>>
MenuItemFormatter --> MenuDictionary : <<use>>

GetMenuActionExecutor --> GetMenuQuery : <<use>>
GetMenuActionExecutor ..|> ActionExecutor : <<bind>> \n Query -> GetMenuQuery
ZooActionFactory --> GetMenuActionExecutor : <<create>>

interface LivingCreature {
    +getBirthday() : DateTime
    +isAlive() : boolean
}

abstract class Animal {
    #birthday: DateTime

    +<<constructor>> Animal(birthday: DateTime)
    +getBirthday() : DateTime
    +isAlive() : boolean
}

LivingCreature <|.. Animal

class Giraffe {
    +<<constructor>> Giraffe(birthday: DateTime)
}

class Elephant {
    +<<constructor>> Elephant(birthday: DateTime)
}

class Tiger {
    +<<constructor>> Tiger(birthday: DateTime)
}

Animal <|-- Giraffe
Animal <|-- Elephant
Animal <|-- Tiger

interface Cage<Creature : LivingCreature> {
    +getOccupants(): List<Creature>
    +add(occupant: Creature)
    +free(occupant: Creature)
}

abstract class AnimalCage<AnimalOccupant : Animal> {
    #occupants : List<AnimalOccupant>

    +getOccupants(): List<AnimalOccupant>
    +add(occupant: AnimalOccupant)
    +free(occupant: AnimalOccupant)
}

Cage <|.. AnimalCage

Animal "0..*" --o AnimalCage

class GiraffeCage
class ElephantCage
class TigerCage

AnimalCage <|-- GiraffeCage : <<bind>> \n AnimalOccupant -> Giraffe
AnimalCage <|-- ElephantCage : <<bind>> \n AnimalOccupant -> Elephant
AnimalCage <|-- TigerCage : <<bind>> \n AnimalOccupant -> Tiger

hide interface fields
@enduml