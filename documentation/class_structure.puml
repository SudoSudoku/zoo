@startuml
interface java.io.Serializable

class ZooApplication {
    + {static} main(args: String[])
}

class ZooConsoleAdapter {
    -zooActionFactory: ZooActionFactory
    + <<constructor>> ZooConsoleAdapter(zooActionFactory: ZooActionFactory)
    + nextCommand()
}

interface ConsoleAdapter<Actions : ActionFactory> {
    +nextCommand()
    +isRunning() : boolean
    +execute()
}

abstract class AbstractConsoleAdapter<Actions : ActionFactory> {
    - {static} DESERIALIZATION_CHAIN : List<Class<? extends DeserializationLink>>

    #actions : Actions
    -scanner : Scanner
    -isRunning : boolean

    # <<constructor>> AbstractConsoleAdapter(Actions actions)
    +{abstract} nextCommand()
    +isRunning() : boolean
    +execute()
    #<Type : Object> readInput(type : Class<Type>) : Type
    #format(result : ResultDto) : String
    #shutDown()
    -createOptionsForField(field: Field) : String
}

AbstractConsoleAdapter ..|> ConsoleAdapter

class  ReflectionUtils {
    -{static} IMPLEMENTATIONS : Map<Class, Object>
    -<<constructor>> ReflectionUtils()
    +{static} <Type : Object> bindInstance(type : Class<Type>, instanceClass : Class<? extends Type>)
    +{static} <Type : Object, Instance : Type> bindInstance(type : Class<Type>, instance: Instance)
    +{static} <Type : Object> getInstance(type : Class<Type>) : Type
    +{static} <Type : Object> createInstance(type : Class<Type>) : Type
    +{static} setField(field : Field, object : Object, value : Value)
}

class ShutdownRequestException

ShutdownRequestException <|-- java.lang.RuntimeException
AbstractConsoleAdapter --> ShutdownRequestException : <<use>>

ZooApplication --> ZooConsoleAdapter : <<use>>
AbstractConsoleAdapter <|-- ZooConsoleAdapter : <<bind>> \n Actions -> ZooActionFactory

AbstractConsoleAdapter -->  ReflectionUtils : <<use>>

interface DeserializationLink {
    +deserialize(String input, Class type) : Object
}

class StringDeserializationLink {
    +deserialize(String input, Class type) : Object
}

class IntegerDeserializationLink {
    +deserialize(String input, Class type) : Object
}

class BooleanDeserializationLink {
    +deserialize(String input, Class type) : Object
}

class EnumDeserializationLink {
    +deserialize(String input, Class type) : Object
}

DeserializationLink <|.. StringDeserializationLink
DeserializationLink <|.. IntegerDeserializationLink
DeserializationLink <|.. BooleanDeserializationLink
DeserializationLink <|.. EnumDeserializationLink
AbstractConsoleAdapter --> DeserializationLink  : <<use>>

interface ActionFactory<ActionIndex : Enum> {
    +create(index: ActionIndex) : ActionExecutor
}

class ZooActionFactory {
    -{static} EXECUTOR_MAP : Map<ZooActionIndex, ActionExecutor>
    +create(index: ActionIndex) : ActionExecutor
}

ZooActionFactory ..|> ActionFactory : <<bind>> \n ActionIndex -> ZooActionIndex
ZooActionFactory --o ZooConsoleAdapter

enum ZooActionIndex {
    +GET_MENU
    +ADD_ANIMAL
    +GET_ANIMALS
    +GET_ANIMALS_BY_TYPE
    +REMOVE_ANIMAL
    +SHUTDOWN
}

ZooActionFactory --> ZooActionIndex : <<use>>

class ResultDto<Result : Serializable> {
    -result : Result
    +toString() : String
    +{static} <Type : Serializable> of(result: Type) : ResultDto<Type>
    +{static} <Type : Serializable> of(result: List<Type>) : ResultDto<Type>
}

class ListResultDto<Result : Serializable> {
    -result : List<Result>
    +toString() : String
}

ResultDto ..|> java.io.Serializable
ResultDto <|-- ListResultDto

interface ActionExecutor<Query : ActionQuery> {
    +execute(query: Query) : ResultDto
}

interface ActionQuery

class GetMenuQuery

GetMenuQuery ..|> ActionQuery
AbstractConsoleAdapter --> ResultDto : <<use>>

class GetMenuActionExecutor {
    +execute(query: GetMenuQuery) : ResultDto
}

class MenuDictionary {
    - {static} DICTIONARY : Map<ZooActionIndex, String>

    -<<constructor>> MenuDictionary()
    + {static} get(index : ZooActionIndex) : String
}

class MenuItemFormatter {
    -<<constructor>> MenuItemFormatter()
    + {static} map(index : ZooActionIndex)
}

GetMenuActionExecutor --> MenuItemFormatter : <<use>>
MenuItemFormatter --> MenuDictionary : <<use>>

GetMenuActionExecutor --> GetMenuQuery : <<use>>
GetMenuActionExecutor ..|> ActionExecutor : <<bind>> \n Query -> GetMenuQuery
ZooActionFactory --> GetMenuActionExecutor : <<create>>

class  AddAnimalQuery {
    -type : AnimalType
    -name : String
    -yearOfBirth : Integer
    -monthOfBirth : Integer
    -dayOfBirth : Integer

    +getType() : AnimalType
    +getName() : String
    +getYearOfBirth() : Integer
    +getMonthOfBirth() : Integer
    +getDayOfBirth() : Integer
}

AddAnimalQuery ..|> ActionQuery

enum AnimalType {
    +GIRAFFE
    +ELEPHANT
    +TIGER
}

class AnimalTypeFactory {
    +{static} create(type: AnimalType) : Class
}

AnimalType --o  AddAnimalQuery
AnimalTypeFactory --> AnimalType : <<use>>
 GetAnimalsByTypeActionExecutor --> AnimalTypeFactory : <<use>>

class  AddAnimalActionExecutor {
    +execute (query : AddAnimalQuery) : ResultDto
}

 AddAnimalActionExecutor -->  AddAnimalQuery : <<use>>

class  AnimalFactory {
    + {static} create(AddAnimalQuery query) : Animal
}

 AddAnimalActionExecutor -->  AnimalFactory : <<use>>

 AnimalFactory --> Giraffe : <<create>>
 AnimalFactory --> Elephant : <<create>>
 AnimalFactory --> Tiger : <<create>>

ZooActionFactory -->  AddAnimalActionExecutor : <<create>>
AddAnimalActionExecutor ..|> ActionExecutor : <<bind>> \n Query -> AddAnimalQuery
AddAnimalActionExecutor --> AnimalRepository : <<use>>

class  GetAnimalsActionExecutor {
    +execute (query : GetAnimalsQuery) : ResultDto
}

GetAnimalsActionExecutor -->  GetAnimalsQuery : <<use>>

class  GetAnimalsQuery

GetAnimalsQuery ..|> ActionQuery

ZooActionFactory -->  GetAnimalsActionExecutor : <<create>>
GetAnimalsActionExecutor ..|> ActionExecutor : <<bind>> \n Query -> GetAnimalsQuery
GetAnimalsActionExecutor --> AnimalRepository : <<use>>

class  GetAnimalsByTypeActionExecutor {
    +execute (query : GetAnimalsByTypeQuery) : ResultDto
}

GetAnimalsByTypeActionExecutor -->  GetAnimalsByTypeQuery : <<use>>

class  GetAnimalsByTypeQuery {
    -type : AnimalType

    +getType() : AnimalType
}
GetAnimalsByTypeQuery ..|> ActionQuery

ZooActionFactory -->  GetAnimalsByTypeActionExecutor : <<create>>
GetAnimalsByTypeActionExecutor ..|> ActionExecutor : <<bind>> \n Query -> GetAnimalsByTypeQuery
GetAnimalsByTypeActionExecutor --> AnimalRepository : <<use>>

class RemoveAnimalExecutor {
    +execute (query : RemoveAnimalQuery) : ResultDto
}

RemoveAnimalExecutor --> RemoveAnimalQuery : <<use>>

class RemoveAnimalQuery {
    -name : String

    +getName() : String
}
RemoveAnimalQuery ..|> ActionQuery

ZooActionFactory --> RemoveAnimalExecutor : <<create>>
RemoveAnimalExecutor ..|> ActionExecutor : <<bind>> \n Query -> RemoveAnimalQuery
RemoveAnimalExecutor --> AnimalRepository : <<use>>

class ShutdownActionExecutor {
    +execute (query : ExitQuery) : ResultDto
}

ShutdownActionExecutor --> ShutdownQuery : <<use>>
ShutdownActionExecutor --> ShutdownRequestException : <<create>>

class ShutdownQuery

ShutdownQuery ..|> ActionQuery
ZooActionFactory --> ShutdownActionExecutor : <<create>>


interface LivingCreature {
    +getBirthday() : Date
    +isAlive() : boolean
}

abstract class Animal {
    #birthday: Date
    #name: String
    #alive: boolean

    #<<constructor>> Animal(birthday: Date)
    +getName() : String
    +getBirthday() : Date
    +isAlive() : boolean
}

LivingCreature <|.. Animal

class Giraffe {
    +<<constructor>> Giraffe(birthday: Date)
}

class Elephant {
    +<<constructor>> Elephant(birthday: Date)
}

class Tiger {
    +<<constructor>> Tiger(birthday: Date)
}

Animal <|-- Giraffe
Animal <|-- Elephant
Animal <|-- Tiger

interface Repository<Id : Object, Model : Object> {
    +get(id: Id) : Model
    +get(predicate: Predicate<Model>) : List<Model>
    +getAll() : List<Model>
    +add(model: Model)
    +remove(model: Model)
    +remove(predicate: Predicate<Model>) : boolean
    +removeAll()
}

class AnimalRepository {
    -repository : List<Animal>
    +get(id: String) : Animal
    +get(predicate: Predicate<Animal>) : List<Animal>
    +getAll() : List<Animal>
    +add(animal: Animal)
    +remove(animal: Animal)
    +remove(predicate: Predicate<Animal>) : boolean
    +removeAll()
}

Repository <|.. AnimalRepository : <<bind>> \n Id -> String, \n Model -> Animal
AnimalRepository o-- Animal

left to right direction
hide interface fields
@enduml